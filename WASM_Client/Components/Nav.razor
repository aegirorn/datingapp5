@inject IAccountService AccountService
@inject IAlertService AlertService
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject AppState AppState

<nav class="navbar navbar-expand-md navbar-dark fixed-top bg-primary">
    <div class="container">
        <a class="navbar-brand" href="/">Dating App</a>
        @if (LoggedIn)
        {
            <ul class="navbar-nav mr-auto">
                <li class="nav-item">
                    <NavLink class="nav-link" href="matches">
                        <span aria-hidden="true"></span> Matches
                    </NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="lists">
                        <span aria-hidden="true"></span> Lists
                    </NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="messages">
                        <span aria-hidden="true"></span> Messages
                    </NavLink>
                </li>
            </ul>
            <div class="nav-item dropdown px-1">
                <a class="dropdown-toggle nav-link"
                    data-toggle="dropdown"
                    aria-expanded="false"
                    href="#">
                    Welcome @AccountService.User.username
                </a>
                <div class="dropdown-menu" role="menu">
                    <a class="dropdown-item" role="presentation" href="lists">Edit Profile</a>
                    <a class="dropdown-item" role="presentation" href="#" @onclick="@LogOut">Logout</a>
                </div>
            </div>        
         }
    </div>
</nav>

@code { 

    private Models.Account.Login model = new Models.Account.Login();

    public bool LoggedIn
    {
        get { return AccountService.User != null; }
    }

    protected override void OnInitialized()
    {
        AppState.OnLoggedInChange += StateHasChanged;
    }

    private void LogIn()
    {

        Login value = new();
        value.username = "bob";
        value.password = "1234";

        AppState.LoggingIn(model.username, model.password);


        //HttpResponseMessage response = await Http.PostAsync($"account/login", new StringContent(JsonSerializer.Serialize(value), Encoding.UTF8, "application/json"));


        ////  HttpResponseMessage response = await Http.PostAsync($"account/login", new StringContent(JsonSerializer.Serialize(value), Encoding.UTF8, "application/json"));

        //if (response.IsSuccessStatusCode)
        //{
        //    UserModel user = await response.Content.ReadFromJsonAsync<UserModel>();
        //    await AccountService.SetUser(user);
        //}



        //await AccountService.Login(model);

        //await AccountService.Login();

        //model.ClearUser();

        if (LoggedIn)
            NavigationManager.NavigateTo("matches");
    }

    private async Task LogOut()
    {
        await AccountService.Logout();
    }

    public void Dispose()
    {
        AppState.OnLoggedInChange -= StateHasChanged;
    }

    /*


                     else
             {
< form class="form-inline mt-2 mt-md-0">
     <input class="form-control mr-sm-2" type="text" placeholder="Username" @bind="@model.username">
     <input class="form-control mr-sm-2" type="password" placeholder="Password" @bind="@model.password">
     <button @onclick="LogIn" class="btn btn-success my-2 my-sm-0" type="submit">Login</button>
< /form>}

         */
}